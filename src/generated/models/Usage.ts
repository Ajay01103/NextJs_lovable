
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Usage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Usage
 * 
 */
export type UsageModel = runtime.Types.Result.DefaultSelection<Prisma.$UsagePayload>

export type AggregateUsage = {
  _count: UsageCountAggregateOutputType | null
  _avg: UsageAvgAggregateOutputType | null
  _sum: UsageSumAggregateOutputType | null
  _min: UsageMinAggregateOutputType | null
  _max: UsageMaxAggregateOutputType | null
}

export type UsageAvgAggregateOutputType = {
  points: number | null
}

export type UsageSumAggregateOutputType = {
  points: number | null
}

export type UsageMinAggregateOutputType = {
  key: string | null
  points: number | null
  expire: Date | null
}

export type UsageMaxAggregateOutputType = {
  key: string | null
  points: number | null
  expire: Date | null
}

export type UsageCountAggregateOutputType = {
  key: number
  points: number
  expire: number
  _all: number
}


export type UsageAvgAggregateInputType = {
  points?: true
}

export type UsageSumAggregateInputType = {
  points?: true
}

export type UsageMinAggregateInputType = {
  key?: true
  points?: true
  expire?: true
}

export type UsageMaxAggregateInputType = {
  key?: true
  points?: true
  expire?: true
}

export type UsageCountAggregateInputType = {
  key?: true
  points?: true
  expire?: true
  _all?: true
}

export type UsageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Usage to aggregate.
   */
  where?: Prisma.UsageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Usages to fetch.
   */
  orderBy?: Prisma.UsageOrderByWithRelationInput | Prisma.UsageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UsageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Usages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Usages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Usages
  **/
  _count?: true | UsageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UsageAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UsageSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UsageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UsageMaxAggregateInputType
}

export type GetUsageAggregateType<T extends UsageAggregateArgs> = {
      [P in keyof T & keyof AggregateUsage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUsage[P]>
    : Prisma.GetScalarType<T[P], AggregateUsage[P]>
}




export type UsageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UsageWhereInput
  orderBy?: Prisma.UsageOrderByWithAggregationInput | Prisma.UsageOrderByWithAggregationInput[]
  by: Prisma.UsageScalarFieldEnum[] | Prisma.UsageScalarFieldEnum
  having?: Prisma.UsageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UsageCountAggregateInputType | true
  _avg?: UsageAvgAggregateInputType
  _sum?: UsageSumAggregateInputType
  _min?: UsageMinAggregateInputType
  _max?: UsageMaxAggregateInputType
}

export type UsageGroupByOutputType = {
  key: string
  points: number
  expire: Date | null
  _count: UsageCountAggregateOutputType | null
  _avg: UsageAvgAggregateOutputType | null
  _sum: UsageSumAggregateOutputType | null
  _min: UsageMinAggregateOutputType | null
  _max: UsageMaxAggregateOutputType | null
}

type GetUsageGroupByPayload<T extends UsageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UsageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UsageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UsageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UsageGroupByOutputType[P]>
      }
    >
  >



export type UsageWhereInput = {
  AND?: Prisma.UsageWhereInput | Prisma.UsageWhereInput[]
  OR?: Prisma.UsageWhereInput[]
  NOT?: Prisma.UsageWhereInput | Prisma.UsageWhereInput[]
  key?: Prisma.StringFilter<"Usage"> | string
  points?: Prisma.IntFilter<"Usage"> | number
  expire?: Prisma.DateTimeNullableFilter<"Usage"> | Date | string | null
}

export type UsageOrderByWithRelationInput = {
  key?: Prisma.SortOrder
  points?: Prisma.SortOrder
  expire?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type UsageWhereUniqueInput = Prisma.AtLeast<{
  key?: string
  AND?: Prisma.UsageWhereInput | Prisma.UsageWhereInput[]
  OR?: Prisma.UsageWhereInput[]
  NOT?: Prisma.UsageWhereInput | Prisma.UsageWhereInput[]
  points?: Prisma.IntFilter<"Usage"> | number
  expire?: Prisma.DateTimeNullableFilter<"Usage"> | Date | string | null
}, "key">

export type UsageOrderByWithAggregationInput = {
  key?: Prisma.SortOrder
  points?: Prisma.SortOrder
  expire?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.UsageCountOrderByAggregateInput
  _avg?: Prisma.UsageAvgOrderByAggregateInput
  _max?: Prisma.UsageMaxOrderByAggregateInput
  _min?: Prisma.UsageMinOrderByAggregateInput
  _sum?: Prisma.UsageSumOrderByAggregateInput
}

export type UsageScalarWhereWithAggregatesInput = {
  AND?: Prisma.UsageScalarWhereWithAggregatesInput | Prisma.UsageScalarWhereWithAggregatesInput[]
  OR?: Prisma.UsageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UsageScalarWhereWithAggregatesInput | Prisma.UsageScalarWhereWithAggregatesInput[]
  key?: Prisma.StringWithAggregatesFilter<"Usage"> | string
  points?: Prisma.IntWithAggregatesFilter<"Usage"> | number
  expire?: Prisma.DateTimeNullableWithAggregatesFilter<"Usage"> | Date | string | null
}

export type UsageCreateInput = {
  key: string
  points: number
  expire?: Date | string | null
}

export type UsageUncheckedCreateInput = {
  key: string
  points: number
  expire?: Date | string | null
}

export type UsageUpdateInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  expire?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type UsageUncheckedUpdateInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  expire?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type UsageCreateManyInput = {
  key: string
  points: number
  expire?: Date | string | null
}

export type UsageUpdateManyMutationInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  expire?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type UsageUncheckedUpdateManyInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  expire?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type UsageCountOrderByAggregateInput = {
  key?: Prisma.SortOrder
  points?: Prisma.SortOrder
  expire?: Prisma.SortOrder
}

export type UsageAvgOrderByAggregateInput = {
  points?: Prisma.SortOrder
}

export type UsageMaxOrderByAggregateInput = {
  key?: Prisma.SortOrder
  points?: Prisma.SortOrder
  expire?: Prisma.SortOrder
}

export type UsageMinOrderByAggregateInput = {
  key?: Prisma.SortOrder
  points?: Prisma.SortOrder
  expire?: Prisma.SortOrder
}

export type UsageSumOrderByAggregateInput = {
  points?: Prisma.SortOrder
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}



export type UsageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  key?: boolean
  points?: boolean
  expire?: boolean
}, ExtArgs["result"]["usage"]>

export type UsageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  key?: boolean
  points?: boolean
  expire?: boolean
}, ExtArgs["result"]["usage"]>

export type UsageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  key?: boolean
  points?: boolean
  expire?: boolean
}, ExtArgs["result"]["usage"]>

export type UsageSelectScalar = {
  key?: boolean
  points?: boolean
  expire?: boolean
}

export type UsageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"key" | "points" | "expire", ExtArgs["result"]["usage"]>

export type $UsagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Usage"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    key: string
    points: number
    expire: Date | null
  }, ExtArgs["result"]["usage"]>
  composites: {}
}

export type UsageGetPayload<S extends boolean | null | undefined | UsageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UsagePayload, S>

export type UsageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UsageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UsageCountAggregateInputType | true
  }

export interface UsageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usage'], meta: { name: 'Usage' } }
  /**
   * Find zero or one Usage that matches the filter.
   * @param {UsageFindUniqueArgs} args - Arguments to find a Usage
   * @example
   * // Get one Usage
   * const usage = await prisma.usage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UsageFindUniqueArgs>(args: Prisma.SelectSubset<T, UsageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UsageClient<runtime.Types.Result.GetResult<Prisma.$UsagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Usage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UsageFindUniqueOrThrowArgs} args - Arguments to find a Usage
   * @example
   * // Get one Usage
   * const usage = await prisma.usage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UsageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UsageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UsageClient<runtime.Types.Result.GetResult<Prisma.$UsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Usage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsageFindFirstArgs} args - Arguments to find a Usage
   * @example
   * // Get one Usage
   * const usage = await prisma.usage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UsageFindFirstArgs>(args?: Prisma.SelectSubset<T, UsageFindFirstArgs<ExtArgs>>): Prisma.Prisma__UsageClient<runtime.Types.Result.GetResult<Prisma.$UsagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Usage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsageFindFirstOrThrowArgs} args - Arguments to find a Usage
   * @example
   * // Get one Usage
   * const usage = await prisma.usage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UsageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UsageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UsageClient<runtime.Types.Result.GetResult<Prisma.$UsagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Usages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Usages
   * const usages = await prisma.usage.findMany()
   * 
   * // Get first 10 Usages
   * const usages = await prisma.usage.findMany({ take: 10 })
   * 
   * // Only select the `key`
   * const usageWithKeyOnly = await prisma.usage.findMany({ select: { key: true } })
   * 
   */
  findMany<T extends UsageFindManyArgs>(args?: Prisma.SelectSubset<T, UsageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Usage.
   * @param {UsageCreateArgs} args - Arguments to create a Usage.
   * @example
   * // Create one Usage
   * const Usage = await prisma.usage.create({
   *   data: {
   *     // ... data to create a Usage
   *   }
   * })
   * 
   */
  create<T extends UsageCreateArgs>(args: Prisma.SelectSubset<T, UsageCreateArgs<ExtArgs>>): Prisma.Prisma__UsageClient<runtime.Types.Result.GetResult<Prisma.$UsagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Usages.
   * @param {UsageCreateManyArgs} args - Arguments to create many Usages.
   * @example
   * // Create many Usages
   * const usage = await prisma.usage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UsageCreateManyArgs>(args?: Prisma.SelectSubset<T, UsageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Usages and returns the data saved in the database.
   * @param {UsageCreateManyAndReturnArgs} args - Arguments to create many Usages.
   * @example
   * // Create many Usages
   * const usage = await prisma.usage.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Usages and only return the `key`
   * const usageWithKeyOnly = await prisma.usage.createManyAndReturn({
   *   select: { key: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UsageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UsageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UsagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Usage.
   * @param {UsageDeleteArgs} args - Arguments to delete one Usage.
   * @example
   * // Delete one Usage
   * const Usage = await prisma.usage.delete({
   *   where: {
   *     // ... filter to delete one Usage
   *   }
   * })
   * 
   */
  delete<T extends UsageDeleteArgs>(args: Prisma.SelectSubset<T, UsageDeleteArgs<ExtArgs>>): Prisma.Prisma__UsageClient<runtime.Types.Result.GetResult<Prisma.$UsagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Usage.
   * @param {UsageUpdateArgs} args - Arguments to update one Usage.
   * @example
   * // Update one Usage
   * const usage = await prisma.usage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UsageUpdateArgs>(args: Prisma.SelectSubset<T, UsageUpdateArgs<ExtArgs>>): Prisma.Prisma__UsageClient<runtime.Types.Result.GetResult<Prisma.$UsagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Usages.
   * @param {UsageDeleteManyArgs} args - Arguments to filter Usages to delete.
   * @example
   * // Delete a few Usages
   * const { count } = await prisma.usage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UsageDeleteManyArgs>(args?: Prisma.SelectSubset<T, UsageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Usages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Usages
   * const usage = await prisma.usage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UsageUpdateManyArgs>(args: Prisma.SelectSubset<T, UsageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Usages and returns the data updated in the database.
   * @param {UsageUpdateManyAndReturnArgs} args - Arguments to update many Usages.
   * @example
   * // Update many Usages
   * const usage = await prisma.usage.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Usages and only return the `key`
   * const usageWithKeyOnly = await prisma.usage.updateManyAndReturn({
   *   select: { key: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UsageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UsageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UsagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Usage.
   * @param {UsageUpsertArgs} args - Arguments to update or create a Usage.
   * @example
   * // Update or create a Usage
   * const usage = await prisma.usage.upsert({
   *   create: {
   *     // ... data to create a Usage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Usage we want to update
   *   }
   * })
   */
  upsert<T extends UsageUpsertArgs>(args: Prisma.SelectSubset<T, UsageUpsertArgs<ExtArgs>>): Prisma.Prisma__UsageClient<runtime.Types.Result.GetResult<Prisma.$UsagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Usages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsageCountArgs} args - Arguments to filter Usages to count.
   * @example
   * // Count the number of Usages
   * const count = await prisma.usage.count({
   *   where: {
   *     // ... the filter for the Usages we want to count
   *   }
   * })
  **/
  count<T extends UsageCountArgs>(
    args?: Prisma.Subset<T, UsageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UsageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Usage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UsageAggregateArgs>(args: Prisma.Subset<T, UsageAggregateArgs>): Prisma.PrismaPromise<GetUsageAggregateType<T>>

  /**
   * Group by Usage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UsageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UsageGroupByArgs['orderBy'] }
      : { orderBy?: UsageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Usage model
 */
readonly fields: UsageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Usage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UsageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Usage model
 */
export interface UsageFieldRefs {
  readonly key: Prisma.FieldRef<"Usage", 'String'>
  readonly points: Prisma.FieldRef<"Usage", 'Int'>
  readonly expire: Prisma.FieldRef<"Usage", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Usage findUnique
 */
export type UsageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Usage
   */
  select?: Prisma.UsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Usage
   */
  omit?: Prisma.UsageOmit<ExtArgs> | null
  /**
   * Filter, which Usage to fetch.
   */
  where: Prisma.UsageWhereUniqueInput
}

/**
 * Usage findUniqueOrThrow
 */
export type UsageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Usage
   */
  select?: Prisma.UsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Usage
   */
  omit?: Prisma.UsageOmit<ExtArgs> | null
  /**
   * Filter, which Usage to fetch.
   */
  where: Prisma.UsageWhereUniqueInput
}

/**
 * Usage findFirst
 */
export type UsageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Usage
   */
  select?: Prisma.UsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Usage
   */
  omit?: Prisma.UsageOmit<ExtArgs> | null
  /**
   * Filter, which Usage to fetch.
   */
  where?: Prisma.UsageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Usages to fetch.
   */
  orderBy?: Prisma.UsageOrderByWithRelationInput | Prisma.UsageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Usages.
   */
  cursor?: Prisma.UsageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Usages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Usages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Usages.
   */
  distinct?: Prisma.UsageScalarFieldEnum | Prisma.UsageScalarFieldEnum[]
}

/**
 * Usage findFirstOrThrow
 */
export type UsageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Usage
   */
  select?: Prisma.UsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Usage
   */
  omit?: Prisma.UsageOmit<ExtArgs> | null
  /**
   * Filter, which Usage to fetch.
   */
  where?: Prisma.UsageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Usages to fetch.
   */
  orderBy?: Prisma.UsageOrderByWithRelationInput | Prisma.UsageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Usages.
   */
  cursor?: Prisma.UsageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Usages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Usages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Usages.
   */
  distinct?: Prisma.UsageScalarFieldEnum | Prisma.UsageScalarFieldEnum[]
}

/**
 * Usage findMany
 */
export type UsageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Usage
   */
  select?: Prisma.UsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Usage
   */
  omit?: Prisma.UsageOmit<ExtArgs> | null
  /**
   * Filter, which Usages to fetch.
   */
  where?: Prisma.UsageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Usages to fetch.
   */
  orderBy?: Prisma.UsageOrderByWithRelationInput | Prisma.UsageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Usages.
   */
  cursor?: Prisma.UsageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Usages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Usages.
   */
  skip?: number
  distinct?: Prisma.UsageScalarFieldEnum | Prisma.UsageScalarFieldEnum[]
}

/**
 * Usage create
 */
export type UsageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Usage
   */
  select?: Prisma.UsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Usage
   */
  omit?: Prisma.UsageOmit<ExtArgs> | null
  /**
   * The data needed to create a Usage.
   */
  data: Prisma.XOR<Prisma.UsageCreateInput, Prisma.UsageUncheckedCreateInput>
}

/**
 * Usage createMany
 */
export type UsageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Usages.
   */
  data: Prisma.UsageCreateManyInput | Prisma.UsageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Usage createManyAndReturn
 */
export type UsageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Usage
   */
  select?: Prisma.UsageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Usage
   */
  omit?: Prisma.UsageOmit<ExtArgs> | null
  /**
   * The data used to create many Usages.
   */
  data: Prisma.UsageCreateManyInput | Prisma.UsageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Usage update
 */
export type UsageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Usage
   */
  select?: Prisma.UsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Usage
   */
  omit?: Prisma.UsageOmit<ExtArgs> | null
  /**
   * The data needed to update a Usage.
   */
  data: Prisma.XOR<Prisma.UsageUpdateInput, Prisma.UsageUncheckedUpdateInput>
  /**
   * Choose, which Usage to update.
   */
  where: Prisma.UsageWhereUniqueInput
}

/**
 * Usage updateMany
 */
export type UsageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Usages.
   */
  data: Prisma.XOR<Prisma.UsageUpdateManyMutationInput, Prisma.UsageUncheckedUpdateManyInput>
  /**
   * Filter which Usages to update
   */
  where?: Prisma.UsageWhereInput
  /**
   * Limit how many Usages to update.
   */
  limit?: number
}

/**
 * Usage updateManyAndReturn
 */
export type UsageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Usage
   */
  select?: Prisma.UsageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Usage
   */
  omit?: Prisma.UsageOmit<ExtArgs> | null
  /**
   * The data used to update Usages.
   */
  data: Prisma.XOR<Prisma.UsageUpdateManyMutationInput, Prisma.UsageUncheckedUpdateManyInput>
  /**
   * Filter which Usages to update
   */
  where?: Prisma.UsageWhereInput
  /**
   * Limit how many Usages to update.
   */
  limit?: number
}

/**
 * Usage upsert
 */
export type UsageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Usage
   */
  select?: Prisma.UsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Usage
   */
  omit?: Prisma.UsageOmit<ExtArgs> | null
  /**
   * The filter to search for the Usage to update in case it exists.
   */
  where: Prisma.UsageWhereUniqueInput
  /**
   * In case the Usage found by the `where` argument doesn't exist, create a new Usage with this data.
   */
  create: Prisma.XOR<Prisma.UsageCreateInput, Prisma.UsageUncheckedCreateInput>
  /**
   * In case the Usage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UsageUpdateInput, Prisma.UsageUncheckedUpdateInput>
}

/**
 * Usage delete
 */
export type UsageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Usage
   */
  select?: Prisma.UsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Usage
   */
  omit?: Prisma.UsageOmit<ExtArgs> | null
  /**
   * Filter which Usage to delete.
   */
  where: Prisma.UsageWhereUniqueInput
}

/**
 * Usage deleteMany
 */
export type UsageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Usages to delete
   */
  where?: Prisma.UsageWhereInput
  /**
   * Limit how many Usages to delete.
   */
  limit?: number
}

/**
 * Usage without action
 */
export type UsageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Usage
   */
  select?: Prisma.UsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Usage
   */
  omit?: Prisma.UsageOmit<ExtArgs> | null
}
