
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Fragment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Fragment
 * 
 */
export type FragmentModel = runtime.Types.Result.DefaultSelection<Prisma.$FragmentPayload>

export type AggregateFragment = {
  _count: FragmentCountAggregateOutputType | null
  _min: FragmentMinAggregateOutputType | null
  _max: FragmentMaxAggregateOutputType | null
}

export type FragmentMinAggregateOutputType = {
  id: string | null
  messageId: string | null
  sandboxUrl: string | null
  title: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FragmentMaxAggregateOutputType = {
  id: string | null
  messageId: string | null
  sandboxUrl: string | null
  title: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FragmentCountAggregateOutputType = {
  id: number
  messageId: number
  sandboxUrl: number
  title: number
  files: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type FragmentMinAggregateInputType = {
  id?: true
  messageId?: true
  sandboxUrl?: true
  title?: true
  createdAt?: true
  updatedAt?: true
}

export type FragmentMaxAggregateInputType = {
  id?: true
  messageId?: true
  sandboxUrl?: true
  title?: true
  createdAt?: true
  updatedAt?: true
}

export type FragmentCountAggregateInputType = {
  id?: true
  messageId?: true
  sandboxUrl?: true
  title?: true
  files?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type FragmentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Fragment to aggregate.
   */
  where?: Prisma.FragmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Fragments to fetch.
   */
  orderBy?: Prisma.FragmentOrderByWithRelationInput | Prisma.FragmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FragmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Fragments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Fragments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Fragments
  **/
  _count?: true | FragmentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FragmentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FragmentMaxAggregateInputType
}

export type GetFragmentAggregateType<T extends FragmentAggregateArgs> = {
      [P in keyof T & keyof AggregateFragment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFragment[P]>
    : Prisma.GetScalarType<T[P], AggregateFragment[P]>
}




export type FragmentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FragmentWhereInput
  orderBy?: Prisma.FragmentOrderByWithAggregationInput | Prisma.FragmentOrderByWithAggregationInput[]
  by: Prisma.FragmentScalarFieldEnum[] | Prisma.FragmentScalarFieldEnum
  having?: Prisma.FragmentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FragmentCountAggregateInputType | true
  _min?: FragmentMinAggregateInputType
  _max?: FragmentMaxAggregateInputType
}

export type FragmentGroupByOutputType = {
  id: string
  messageId: string
  sandboxUrl: string
  title: string
  files: runtime.JsonValue
  createdAt: Date
  updatedAt: Date
  _count: FragmentCountAggregateOutputType | null
  _min: FragmentMinAggregateOutputType | null
  _max: FragmentMaxAggregateOutputType | null
}

type GetFragmentGroupByPayload<T extends FragmentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FragmentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FragmentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FragmentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FragmentGroupByOutputType[P]>
      }
    >
  >



export type FragmentWhereInput = {
  AND?: Prisma.FragmentWhereInput | Prisma.FragmentWhereInput[]
  OR?: Prisma.FragmentWhereInput[]
  NOT?: Prisma.FragmentWhereInput | Prisma.FragmentWhereInput[]
  id?: Prisma.StringFilter<"Fragment"> | string
  messageId?: Prisma.StringFilter<"Fragment"> | string
  sandboxUrl?: Prisma.StringFilter<"Fragment"> | string
  title?: Prisma.StringFilter<"Fragment"> | string
  files?: Prisma.JsonFilter<"Fragment">
  createdAt?: Prisma.DateTimeFilter<"Fragment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Fragment"> | Date | string
  message?: Prisma.XOR<Prisma.MessageScalarRelationFilter, Prisma.MessageWhereInput>
}

export type FragmentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  sandboxUrl?: Prisma.SortOrder
  title?: Prisma.SortOrder
  files?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  message?: Prisma.MessageOrderByWithRelationInput
}

export type FragmentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  messageId?: string
  AND?: Prisma.FragmentWhereInput | Prisma.FragmentWhereInput[]
  OR?: Prisma.FragmentWhereInput[]
  NOT?: Prisma.FragmentWhereInput | Prisma.FragmentWhereInput[]
  sandboxUrl?: Prisma.StringFilter<"Fragment"> | string
  title?: Prisma.StringFilter<"Fragment"> | string
  files?: Prisma.JsonFilter<"Fragment">
  createdAt?: Prisma.DateTimeFilter<"Fragment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Fragment"> | Date | string
  message?: Prisma.XOR<Prisma.MessageScalarRelationFilter, Prisma.MessageWhereInput>
}, "id" | "messageId">

export type FragmentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  sandboxUrl?: Prisma.SortOrder
  title?: Prisma.SortOrder
  files?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.FragmentCountOrderByAggregateInput
  _max?: Prisma.FragmentMaxOrderByAggregateInput
  _min?: Prisma.FragmentMinOrderByAggregateInput
}

export type FragmentScalarWhereWithAggregatesInput = {
  AND?: Prisma.FragmentScalarWhereWithAggregatesInput | Prisma.FragmentScalarWhereWithAggregatesInput[]
  OR?: Prisma.FragmentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FragmentScalarWhereWithAggregatesInput | Prisma.FragmentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Fragment"> | string
  messageId?: Prisma.StringWithAggregatesFilter<"Fragment"> | string
  sandboxUrl?: Prisma.StringWithAggregatesFilter<"Fragment"> | string
  title?: Prisma.StringWithAggregatesFilter<"Fragment"> | string
  files?: Prisma.JsonWithAggregatesFilter<"Fragment">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Fragment"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Fragment"> | Date | string
}

export type FragmentCreateInput = {
  id?: string
  sandboxUrl: string
  title: string
  files: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  message: Prisma.MessageCreateNestedOneWithoutFragmentInput
}

export type FragmentUncheckedCreateInput = {
  id?: string
  messageId: string
  sandboxUrl: string
  title: string
  files: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FragmentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sandboxUrl?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  files?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  message?: Prisma.MessageUpdateOneRequiredWithoutFragmentNestedInput
}

export type FragmentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.StringFieldUpdateOperationsInput | string
  sandboxUrl?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  files?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FragmentCreateManyInput = {
  id?: string
  messageId: string
  sandboxUrl: string
  title: string
  files: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FragmentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sandboxUrl?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  files?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FragmentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.StringFieldUpdateOperationsInput | string
  sandboxUrl?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  files?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FragmentNullableScalarRelationFilter = {
  is?: Prisma.FragmentWhereInput | null
  isNot?: Prisma.FragmentWhereInput | null
}

export type FragmentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  sandboxUrl?: Prisma.SortOrder
  title?: Prisma.SortOrder
  files?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FragmentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  sandboxUrl?: Prisma.SortOrder
  title?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FragmentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  sandboxUrl?: Prisma.SortOrder
  title?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FragmentCreateNestedOneWithoutMessageInput = {
  create?: Prisma.XOR<Prisma.FragmentCreateWithoutMessageInput, Prisma.FragmentUncheckedCreateWithoutMessageInput>
  connectOrCreate?: Prisma.FragmentCreateOrConnectWithoutMessageInput
  connect?: Prisma.FragmentWhereUniqueInput
}

export type FragmentUncheckedCreateNestedOneWithoutMessageInput = {
  create?: Prisma.XOR<Prisma.FragmentCreateWithoutMessageInput, Prisma.FragmentUncheckedCreateWithoutMessageInput>
  connectOrCreate?: Prisma.FragmentCreateOrConnectWithoutMessageInput
  connect?: Prisma.FragmentWhereUniqueInput
}

export type FragmentUpdateOneWithoutMessageNestedInput = {
  create?: Prisma.XOR<Prisma.FragmentCreateWithoutMessageInput, Prisma.FragmentUncheckedCreateWithoutMessageInput>
  connectOrCreate?: Prisma.FragmentCreateOrConnectWithoutMessageInput
  upsert?: Prisma.FragmentUpsertWithoutMessageInput
  disconnect?: Prisma.FragmentWhereInput | boolean
  delete?: Prisma.FragmentWhereInput | boolean
  connect?: Prisma.FragmentWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FragmentUpdateToOneWithWhereWithoutMessageInput, Prisma.FragmentUpdateWithoutMessageInput>, Prisma.FragmentUncheckedUpdateWithoutMessageInput>
}

export type FragmentUncheckedUpdateOneWithoutMessageNestedInput = {
  create?: Prisma.XOR<Prisma.FragmentCreateWithoutMessageInput, Prisma.FragmentUncheckedCreateWithoutMessageInput>
  connectOrCreate?: Prisma.FragmentCreateOrConnectWithoutMessageInput
  upsert?: Prisma.FragmentUpsertWithoutMessageInput
  disconnect?: Prisma.FragmentWhereInput | boolean
  delete?: Prisma.FragmentWhereInput | boolean
  connect?: Prisma.FragmentWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FragmentUpdateToOneWithWhereWithoutMessageInput, Prisma.FragmentUpdateWithoutMessageInput>, Prisma.FragmentUncheckedUpdateWithoutMessageInput>
}

export type FragmentCreateWithoutMessageInput = {
  id?: string
  sandboxUrl: string
  title: string
  files: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FragmentUncheckedCreateWithoutMessageInput = {
  id?: string
  sandboxUrl: string
  title: string
  files: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FragmentCreateOrConnectWithoutMessageInput = {
  where: Prisma.FragmentWhereUniqueInput
  create: Prisma.XOR<Prisma.FragmentCreateWithoutMessageInput, Prisma.FragmentUncheckedCreateWithoutMessageInput>
}

export type FragmentUpsertWithoutMessageInput = {
  update: Prisma.XOR<Prisma.FragmentUpdateWithoutMessageInput, Prisma.FragmentUncheckedUpdateWithoutMessageInput>
  create: Prisma.XOR<Prisma.FragmentCreateWithoutMessageInput, Prisma.FragmentUncheckedCreateWithoutMessageInput>
  where?: Prisma.FragmentWhereInput
}

export type FragmentUpdateToOneWithWhereWithoutMessageInput = {
  where?: Prisma.FragmentWhereInput
  data: Prisma.XOR<Prisma.FragmentUpdateWithoutMessageInput, Prisma.FragmentUncheckedUpdateWithoutMessageInput>
}

export type FragmentUpdateWithoutMessageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sandboxUrl?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  files?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FragmentUncheckedUpdateWithoutMessageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sandboxUrl?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  files?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type FragmentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  messageId?: boolean
  sandboxUrl?: boolean
  title?: boolean
  files?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fragment"]>

export type FragmentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  messageId?: boolean
  sandboxUrl?: boolean
  title?: boolean
  files?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fragment"]>

export type FragmentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  messageId?: boolean
  sandboxUrl?: boolean
  title?: boolean
  files?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fragment"]>

export type FragmentSelectScalar = {
  id?: boolean
  messageId?: boolean
  sandboxUrl?: boolean
  title?: boolean
  files?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type FragmentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "messageId" | "sandboxUrl" | "title" | "files" | "createdAt" | "updatedAt", ExtArgs["result"]["fragment"]>
export type FragmentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
}
export type FragmentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
}
export type FragmentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
}

export type $FragmentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Fragment"
  objects: {
    message: Prisma.$MessagePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    messageId: string
    sandboxUrl: string
    title: string
    files: runtime.JsonValue
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["fragment"]>
  composites: {}
}

export type FragmentGetPayload<S extends boolean | null | undefined | FragmentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FragmentPayload, S>

export type FragmentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FragmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FragmentCountAggregateInputType | true
  }

export interface FragmentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Fragment'], meta: { name: 'Fragment' } }
  /**
   * Find zero or one Fragment that matches the filter.
   * @param {FragmentFindUniqueArgs} args - Arguments to find a Fragment
   * @example
   * // Get one Fragment
   * const fragment = await prisma.fragment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FragmentFindUniqueArgs>(args: Prisma.SelectSubset<T, FragmentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FragmentClient<runtime.Types.Result.GetResult<Prisma.$FragmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Fragment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FragmentFindUniqueOrThrowArgs} args - Arguments to find a Fragment
   * @example
   * // Get one Fragment
   * const fragment = await prisma.fragment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FragmentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FragmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FragmentClient<runtime.Types.Result.GetResult<Prisma.$FragmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Fragment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FragmentFindFirstArgs} args - Arguments to find a Fragment
   * @example
   * // Get one Fragment
   * const fragment = await prisma.fragment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FragmentFindFirstArgs>(args?: Prisma.SelectSubset<T, FragmentFindFirstArgs<ExtArgs>>): Prisma.Prisma__FragmentClient<runtime.Types.Result.GetResult<Prisma.$FragmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Fragment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FragmentFindFirstOrThrowArgs} args - Arguments to find a Fragment
   * @example
   * // Get one Fragment
   * const fragment = await prisma.fragment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FragmentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FragmentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FragmentClient<runtime.Types.Result.GetResult<Prisma.$FragmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Fragments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FragmentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Fragments
   * const fragments = await prisma.fragment.findMany()
   * 
   * // Get first 10 Fragments
   * const fragments = await prisma.fragment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const fragmentWithIdOnly = await prisma.fragment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FragmentFindManyArgs>(args?: Prisma.SelectSubset<T, FragmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FragmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Fragment.
   * @param {FragmentCreateArgs} args - Arguments to create a Fragment.
   * @example
   * // Create one Fragment
   * const Fragment = await prisma.fragment.create({
   *   data: {
   *     // ... data to create a Fragment
   *   }
   * })
   * 
   */
  create<T extends FragmentCreateArgs>(args: Prisma.SelectSubset<T, FragmentCreateArgs<ExtArgs>>): Prisma.Prisma__FragmentClient<runtime.Types.Result.GetResult<Prisma.$FragmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Fragments.
   * @param {FragmentCreateManyArgs} args - Arguments to create many Fragments.
   * @example
   * // Create many Fragments
   * const fragment = await prisma.fragment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FragmentCreateManyArgs>(args?: Prisma.SelectSubset<T, FragmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Fragments and returns the data saved in the database.
   * @param {FragmentCreateManyAndReturnArgs} args - Arguments to create many Fragments.
   * @example
   * // Create many Fragments
   * const fragment = await prisma.fragment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Fragments and only return the `id`
   * const fragmentWithIdOnly = await prisma.fragment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FragmentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FragmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FragmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Fragment.
   * @param {FragmentDeleteArgs} args - Arguments to delete one Fragment.
   * @example
   * // Delete one Fragment
   * const Fragment = await prisma.fragment.delete({
   *   where: {
   *     // ... filter to delete one Fragment
   *   }
   * })
   * 
   */
  delete<T extends FragmentDeleteArgs>(args: Prisma.SelectSubset<T, FragmentDeleteArgs<ExtArgs>>): Prisma.Prisma__FragmentClient<runtime.Types.Result.GetResult<Prisma.$FragmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Fragment.
   * @param {FragmentUpdateArgs} args - Arguments to update one Fragment.
   * @example
   * // Update one Fragment
   * const fragment = await prisma.fragment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FragmentUpdateArgs>(args: Prisma.SelectSubset<T, FragmentUpdateArgs<ExtArgs>>): Prisma.Prisma__FragmentClient<runtime.Types.Result.GetResult<Prisma.$FragmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Fragments.
   * @param {FragmentDeleteManyArgs} args - Arguments to filter Fragments to delete.
   * @example
   * // Delete a few Fragments
   * const { count } = await prisma.fragment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FragmentDeleteManyArgs>(args?: Prisma.SelectSubset<T, FragmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Fragments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FragmentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Fragments
   * const fragment = await prisma.fragment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FragmentUpdateManyArgs>(args: Prisma.SelectSubset<T, FragmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Fragments and returns the data updated in the database.
   * @param {FragmentUpdateManyAndReturnArgs} args - Arguments to update many Fragments.
   * @example
   * // Update many Fragments
   * const fragment = await prisma.fragment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Fragments and only return the `id`
   * const fragmentWithIdOnly = await prisma.fragment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FragmentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FragmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FragmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Fragment.
   * @param {FragmentUpsertArgs} args - Arguments to update or create a Fragment.
   * @example
   * // Update or create a Fragment
   * const fragment = await prisma.fragment.upsert({
   *   create: {
   *     // ... data to create a Fragment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Fragment we want to update
   *   }
   * })
   */
  upsert<T extends FragmentUpsertArgs>(args: Prisma.SelectSubset<T, FragmentUpsertArgs<ExtArgs>>): Prisma.Prisma__FragmentClient<runtime.Types.Result.GetResult<Prisma.$FragmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Fragments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FragmentCountArgs} args - Arguments to filter Fragments to count.
   * @example
   * // Count the number of Fragments
   * const count = await prisma.fragment.count({
   *   where: {
   *     // ... the filter for the Fragments we want to count
   *   }
   * })
  **/
  count<T extends FragmentCountArgs>(
    args?: Prisma.Subset<T, FragmentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FragmentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Fragment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FragmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FragmentAggregateArgs>(args: Prisma.Subset<T, FragmentAggregateArgs>): Prisma.PrismaPromise<GetFragmentAggregateType<T>>

  /**
   * Group by Fragment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FragmentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FragmentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FragmentGroupByArgs['orderBy'] }
      : { orderBy?: FragmentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FragmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFragmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Fragment model
 */
readonly fields: FragmentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Fragment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FragmentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  message<T extends Prisma.MessageDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MessageDefaultArgs<ExtArgs>>): Prisma.Prisma__MessageClient<runtime.Types.Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Fragment model
 */
export interface FragmentFieldRefs {
  readonly id: Prisma.FieldRef<"Fragment", 'String'>
  readonly messageId: Prisma.FieldRef<"Fragment", 'String'>
  readonly sandboxUrl: Prisma.FieldRef<"Fragment", 'String'>
  readonly title: Prisma.FieldRef<"Fragment", 'String'>
  readonly files: Prisma.FieldRef<"Fragment", 'Json'>
  readonly createdAt: Prisma.FieldRef<"Fragment", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Fragment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Fragment findUnique
 */
export type FragmentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fragment
   */
  select?: Prisma.FragmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fragment
   */
  omit?: Prisma.FragmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FragmentInclude<ExtArgs> | null
  /**
   * Filter, which Fragment to fetch.
   */
  where: Prisma.FragmentWhereUniqueInput
}

/**
 * Fragment findUniqueOrThrow
 */
export type FragmentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fragment
   */
  select?: Prisma.FragmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fragment
   */
  omit?: Prisma.FragmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FragmentInclude<ExtArgs> | null
  /**
   * Filter, which Fragment to fetch.
   */
  where: Prisma.FragmentWhereUniqueInput
}

/**
 * Fragment findFirst
 */
export type FragmentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fragment
   */
  select?: Prisma.FragmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fragment
   */
  omit?: Prisma.FragmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FragmentInclude<ExtArgs> | null
  /**
   * Filter, which Fragment to fetch.
   */
  where?: Prisma.FragmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Fragments to fetch.
   */
  orderBy?: Prisma.FragmentOrderByWithRelationInput | Prisma.FragmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Fragments.
   */
  cursor?: Prisma.FragmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Fragments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Fragments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Fragments.
   */
  distinct?: Prisma.FragmentScalarFieldEnum | Prisma.FragmentScalarFieldEnum[]
}

/**
 * Fragment findFirstOrThrow
 */
export type FragmentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fragment
   */
  select?: Prisma.FragmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fragment
   */
  omit?: Prisma.FragmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FragmentInclude<ExtArgs> | null
  /**
   * Filter, which Fragment to fetch.
   */
  where?: Prisma.FragmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Fragments to fetch.
   */
  orderBy?: Prisma.FragmentOrderByWithRelationInput | Prisma.FragmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Fragments.
   */
  cursor?: Prisma.FragmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Fragments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Fragments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Fragments.
   */
  distinct?: Prisma.FragmentScalarFieldEnum | Prisma.FragmentScalarFieldEnum[]
}

/**
 * Fragment findMany
 */
export type FragmentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fragment
   */
  select?: Prisma.FragmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fragment
   */
  omit?: Prisma.FragmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FragmentInclude<ExtArgs> | null
  /**
   * Filter, which Fragments to fetch.
   */
  where?: Prisma.FragmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Fragments to fetch.
   */
  orderBy?: Prisma.FragmentOrderByWithRelationInput | Prisma.FragmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Fragments.
   */
  cursor?: Prisma.FragmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Fragments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Fragments.
   */
  skip?: number
  distinct?: Prisma.FragmentScalarFieldEnum | Prisma.FragmentScalarFieldEnum[]
}

/**
 * Fragment create
 */
export type FragmentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fragment
   */
  select?: Prisma.FragmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fragment
   */
  omit?: Prisma.FragmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FragmentInclude<ExtArgs> | null
  /**
   * The data needed to create a Fragment.
   */
  data: Prisma.XOR<Prisma.FragmentCreateInput, Prisma.FragmentUncheckedCreateInput>
}

/**
 * Fragment createMany
 */
export type FragmentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Fragments.
   */
  data: Prisma.FragmentCreateManyInput | Prisma.FragmentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Fragment createManyAndReturn
 */
export type FragmentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fragment
   */
  select?: Prisma.FragmentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Fragment
   */
  omit?: Prisma.FragmentOmit<ExtArgs> | null
  /**
   * The data used to create many Fragments.
   */
  data: Prisma.FragmentCreateManyInput | Prisma.FragmentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FragmentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Fragment update
 */
export type FragmentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fragment
   */
  select?: Prisma.FragmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fragment
   */
  omit?: Prisma.FragmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FragmentInclude<ExtArgs> | null
  /**
   * The data needed to update a Fragment.
   */
  data: Prisma.XOR<Prisma.FragmentUpdateInput, Prisma.FragmentUncheckedUpdateInput>
  /**
   * Choose, which Fragment to update.
   */
  where: Prisma.FragmentWhereUniqueInput
}

/**
 * Fragment updateMany
 */
export type FragmentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Fragments.
   */
  data: Prisma.XOR<Prisma.FragmentUpdateManyMutationInput, Prisma.FragmentUncheckedUpdateManyInput>
  /**
   * Filter which Fragments to update
   */
  where?: Prisma.FragmentWhereInput
  /**
   * Limit how many Fragments to update.
   */
  limit?: number
}

/**
 * Fragment updateManyAndReturn
 */
export type FragmentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fragment
   */
  select?: Prisma.FragmentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Fragment
   */
  omit?: Prisma.FragmentOmit<ExtArgs> | null
  /**
   * The data used to update Fragments.
   */
  data: Prisma.XOR<Prisma.FragmentUpdateManyMutationInput, Prisma.FragmentUncheckedUpdateManyInput>
  /**
   * Filter which Fragments to update
   */
  where?: Prisma.FragmentWhereInput
  /**
   * Limit how many Fragments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FragmentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Fragment upsert
 */
export type FragmentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fragment
   */
  select?: Prisma.FragmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fragment
   */
  omit?: Prisma.FragmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FragmentInclude<ExtArgs> | null
  /**
   * The filter to search for the Fragment to update in case it exists.
   */
  where: Prisma.FragmentWhereUniqueInput
  /**
   * In case the Fragment found by the `where` argument doesn't exist, create a new Fragment with this data.
   */
  create: Prisma.XOR<Prisma.FragmentCreateInput, Prisma.FragmentUncheckedCreateInput>
  /**
   * In case the Fragment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FragmentUpdateInput, Prisma.FragmentUncheckedUpdateInput>
}

/**
 * Fragment delete
 */
export type FragmentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fragment
   */
  select?: Prisma.FragmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fragment
   */
  omit?: Prisma.FragmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FragmentInclude<ExtArgs> | null
  /**
   * Filter which Fragment to delete.
   */
  where: Prisma.FragmentWhereUniqueInput
}

/**
 * Fragment deleteMany
 */
export type FragmentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Fragments to delete
   */
  where?: Prisma.FragmentWhereInput
  /**
   * Limit how many Fragments to delete.
   */
  limit?: number
}

/**
 * Fragment without action
 */
export type FragmentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Fragment
   */
  select?: Prisma.FragmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Fragment
   */
  omit?: Prisma.FragmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FragmentInclude<ExtArgs> | null
}
